#!/bin/bash
set -u -o pipefail -o noclobber

script_name=$(basename "$0")

# Flag to see if we're playing
temp_play_file="/tmp/vlc_audio_player.pid"

# Default value
declare -i shuffle=0
declare -i delay=1
declare -i do_preset=0
declare -i list=0
declare -i background=0
declare -i quiet=0


# Presets
declare -A presets
presets[heartbound]="$HOME/Music/Heartbound - OST"
presets[champions]="$HOME/Music/Champions of Breakfast - OST"
presets[breakfast]="${presets["champions"]}"


# Error function
error() {
	echo "Usage: ${script_name} [-s] [-b] [-q] [-d <int>] [<PLAYLIST_FOLDER> | -p <PRESET> | -l | STOP]" 1>&2 && exit "$1"
}

stop() {
	polybar-msg action music module_hide >/dev/null
	exit 0
}

print_help() {
	echo "Usage: ${script_name} [-s] [-b] [-q] [-d <int>] [<PLAYLIST_FOLDER> | -p <PRESET> | -l | STOP]"
	printf "  -s\t\tshuffle\n"
	printf "  -b\t\tbackground\n"
	printf "  -q\t\tquiet\n"
	printf "  -d <int>\tdelay between songs (seconds)\n"
	printf "  -p <preset>\tchoose a preset\n"
	printf "  -l\t\tlist available presets\n"
}


# Option handling
while getopts ":sd:bqplh" opt
do
	case "${opt}" in
		s)  shuffle=1
			;;
		d)	if [[ ! "${OPTARG}" =~ [0-9]+ ]]; then
				error 1
			fi
			delay="${OPTARG}"
			;;
		b)	background=1
			;;
		q)	quiet=1
			;;
		p)  do_preset=1
			;;
		l)  list=1
			;;
		h)	print_help
			exit 0
			;;
		\?) error 1
			;;
	esac
done

shift $((OPTIND - 1))


# List presets
if (( list == 1 )); then
	keys=("${!presets[@]}")
	echo "Available presets:"
	for key in "${keys[@]}"
	do
		echo "- ${key}"
	done

	exit 0
fi


# Additional error-handling
if (( $# != 1 )); then
	error 2
fi


# Stop the music if needed
if [[ $(tr '[:upper:]' '[:lower:]' <<< "$1" ) == "stop" ]]; then
	if [[ -f "${temp_play_file}" ]]; then
		kill "$(cat "${temp_play_file}")"
		rm "${temp_play_file}"
		stop
	fi
	exit 0
fi

# If music is already playing, don't start extra music
if [[ -f "${temp_play_file}" ]]; then
	echo "Already playing music (${temp_play_file} exists), not starting new music." 1>&2
	exit 5
fi



# Play from preset
if (( do_preset == 1 )); then
	key=$( tr '[:upper:]' '[:lower:]' <<< "$1" )
	if [ -z "${presets[$key]}" ]; then
		echo "Preset ${key} not found." 1>&2
		exit 4
	fi

	folder_path="${presets[$key]}"
else
	# Else, play argument
	folder_path="$1"
fi

if [ ! -d "$folder_path" ]; then
	error 3
fi


# Set little music note in polybar
polybar-msg action music module_show >/dev/null

# Play the songs in the folder
if (( background == 0 )); then
	tmp_file="$(mktemp)"
	stop_() { rm "$tmp_file"; stop; }
	trap stop_ SIGINT

	if (( shuffle == 1 )); then
		find "${folder_path%/}" -maxdepth 1 -name "*.mp3" | shuf >> "$tmp_file"
		while read -r file; do
			(( quiet == 0 )) && echo "Now playing: $(basename "$file")"
			cvlc --play-and-exit "$file" 2>/dev/null
			sleep "$delay"
		done < "$tmp_file"
	else
		for file in "${folder_path%/}"/*.mp3; do
			(( quiet == 0 )) && echo "Now playing: $(basename "$file")"
			cvlc --play-and-exit "$file" 2>/dev/null
			sleep "$delay"
		done
	fi
	trap - SIGINT
else
	echo "Music will start playing in the background. Use \"${script_name} stop\" to stop."
	if (( shuffle == 1 )); then
		cvlc --random "${folder_path%/}/"*.mp3 >/dev/null 2>&1 &
		echo $! > "${temp_play_file}"
	else
		cvlc --loop "${folder_path%/}/"*.mp3 >/dev/null 2>&1 &
		echo $! > "${temp_play_file}"
	fi
fi
